#!/usr/bin/env python3
"""========================================================================
Purpose:
    The purpose of this script is to calculate all six grad omega terms.

Author:
    Emilio Torres
========================================================================"""
#=========================================================================#
# Preamble                                                                #
#=========================================================================#
#-------------------------------------------------------------------------#
# Python packages                                                         #
#-------------------------------------------------------------------------#
import sys
from subprocess import call
import numpy as np
#=========================================================================#
# User defined functions                                                  #
#=========================================================================#
#-------------------------------------------------------------------------#
# Calculating grad omega                                                  #
#-------------------------------------------------------------------------#
def grad_omega(
        comp,
        h   = True):

    """ Calculating grad omega  """
    #---------------------------------------------------------------------#
    # Setting the default variables                                       #
    #---------------------------------------------------------------------#
    comp    = str(comp)
    if h is True:
        h = 2.0*np.pi/64.0
    #---------------------------------------------------------------------#
    # Loading data                                                        #
    #---------------------------------------------------------------------#
    omega       = np.load(data_path + 'omega' + comp + '.npy')
    print('Loaded: omega-' + comp )
    dim         = omega.shape
    grad1       = np.zeros((dim[0], dim[1], dim[2], dim[3]))
    grad2       = np.zeros((dim[0], dim[1], dim[2], dim[3]))
    grad3       = np.zeros((dim[0], dim[1], dim[2], dim[3]))
    #---------------------------------------------------------------------#
    # Looping over time                                                   #
    #---------------------------------------------------------------------#
    count = 0
    for i in range(0, dim[3]):
        grad            = np.gradient(omega[:,:,:,i], h, edge_order=2)
        grad1[:,:,:,i]  = grad[2]
        grad2[:,:,:,i]  = grad[1]
        grad3[:,:,:,i]  = grad[0]
        #-----------------------------------------------------------------#
        # Print count                                                     #
        #-----------------------------------------------------------------#
        if count > 35:
            print('omega-' + comp + 'time step --> %i'      %(i))
            count   = 0
        count += 1
    #---------------------------------------------------------------------#
    # Storing grad omega-1                                                #
    #---------------------------------------------------------------------#
    np.save(data_path + 'grad-omega' + comp + '-1.npy', grad1)
    np.save(data_path + 'grad-omega' + comp + '-2.npy', grad2)
    np.save(data_path + 'grad-omega' + comp + '-3.npy', grad3)
    #---------------------------------------------------------------------#
    # deleting variables                                                  #
    #---------------------------------------------------------------------#
    del omega
    del grad
    del grad1
    del grad2
    del grad3

    return
#=========================================================================#
# Main                                                                    #
#=========================================================================#
if __name__ == "__main__":
    #=====================================================================#
    # Main preamble                                                       #
    #=====================================================================#
    call(['clear'])

    print('**** Warning this has not been unit testes')
    sys.exit(0)
