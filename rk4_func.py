#!/usr/bin/env python3
"""========================================================================
Purpose:
    The purpose of this script is to play around with the RK4 scheme to
    calculate the first derivative using classical Runga-Kutta 
    coefficients.

Author:
    Emilio Torres
========================================================================"""
#=========================================================================#
# Preamble                                                                #
#=========================================================================#
#-------------------------------------------------------------------------#
# Python packages                                                         #
#-------------------------------------------------------------------------#
import os
import sys
from subprocess import call
import numpy as np
import matplotlib.pyplot as plt
#=========================================================================#
# User defined functions                                                  #
#=========================================================================#
#-------------------------------------------------------------------------#
# Function that you trying to calculate derivative of                     #
#-------------------------------------------------------------------------#
def func(
        xval,
        yval):

    """ Calculating the value of the function """
    #---------------------------------------------------------------------#
    # Evaluating function                                                 #
    #---------------------------------------------------------------------#
    val = -1.2*yval+7.0*np.exp(-0.3*xval)

    return val
#-------------------------------------------------------------------------#
# k coefficient functions                                                 #
#-------------------------------------------------------------------------#
def k_coeff(
        xval,
        yval,
        Dx):

    """ Calculating the k coefficients for the RK4 method """
    #---------------------------------------------------------------------#
    # K1                                                                  #
    #---------------------------------------------------------------------#
    k1  = func(xval, yval)
    #---------------------------------------------------------------------#
    # K2                                                                  #
    #---------------------------------------------------------------------#
    k2  = func(xval + 0.5*Dx, yval+0.5*k1*Dx)
    #---------------------------------------------------------------------#
    # K3                                                                  #
    #---------------------------------------------------------------------#
    k3  = func(xval + 0.5*Dx, yval+0.5*k2*Dx)
    #---------------------------------------------------------------------#
    # K4                                                                  #
    #---------------------------------------------------------------------#
    k4  = func(xval + Dx, yval+k3*Dx)

    return k1, k2, k3, k4
#-------------------------------------------------------------------------#
# RK4 function                                                            #
#-------------------------------------------------------------------------#
def rk4_func(
        xvec,
        IC,
        Dx):

    """ Performing the RK4 integration """
    #---------------------------------------------------------------------#
    # Domain variables                                                    #
    #---------------------------------------------------------------------#
    y       = np.zeros(len(xvec))    
    y[0]    = IC
    #---------------------------------------------------------------------#
    # Looping over x domain                                               #
    #---------------------------------------------------------------------#
    for i in range(0, len(xvec)-1):
        [k1, k2, k3, k4]    = k_coeff(xvec[i], y[i], Dx) 
        y[i+1]  = y[i] + (1.0/6.0)*Dx*(k1 + 2.0*k2 + 2.0*k3 + k4)
    
    return y 
#=========================================================================#
# Main                                                                    #
#=========================================================================#
if __name__ == '__main__':
    #---------------------------------------------------------------------#
    # Main preamble                                                       #
    #---------------------------------------------------------------------#
    call(['clear'])
    #---------------------------------------------------------------------#
    # Domain variables                                                    #
    #---------------------------------------------------------------------#
    N   = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 4096]
    err = np.zeros(len(N))
    dx  = np.zeros(len(N))
    #---------------------------------------------------------------------#
    # Looping over the different grid sizes                               #
    #---------------------------------------------------------------------#
    for i, n in enumerate(N):
        x       = np.linspace(0.0, 1.5, n+1)
        dx[i]   = 1.5/n
        yexact  = 70.0/9.0*np.exp(-0.3*x)-43.0/9.0*np.exp(-1.2*x)
        yrk4    = rk4_func(x, 3.0, dx[i])
        err[i]  = max(abs(yexact -yrk4))
    #---------------------------------------------------------------------#
    # Plotting error comparison                                           #
    #---------------------------------------------------------------------#
    plt.loglog(dx, err, 'b--o', lw=1.5, label="RK4")
    plt.loglog(dx, 0.125*dx**4.0 , 'k', lw=1.5, label="$\sim c_{1} x^{4}$")
    plt.xlabel("Step size")
    plt.ylabel("Error")
    plt.grid(True)
    plt.legend(loc=0)
    plt.show()
    plt.close()
    #---------------------------------------------------------------------#
    # Plotting solution                                                   #
    #---------------------------------------------------------------------#
    plt.plot(x, yexact, 'k', lw=1.5, label="Exact")
    plt.plot(x, yrk4, 'b--o', markevery=75, lw=1.5, label="RK4")
    plt.xlabel("Step size")
    plt.ylabel("Error")
    plt.grid(True)
    plt.legend(loc=0)
    plt.show()
    plt.close()
