#!/usr/bin/envy python3
"""========================================================================
Purpose:
    The purpose of this subroutine is to filter of field using a spectrally
    sharp and box filter.

Author:
    Emilio Torres
========================================================================"""
#=========================================================================#
# Preamble                                                                #
#=========================================================================#
#-------------------------------------------------------------------------#
# Python packages                                                         #
#-------------------------------------------------------------------------#
import sys
from subprocess import call
import numpy as np
#=========================================================================#
# User defined functions                                                  #
#=========================================================================#
#-------------------------------------------------------------------------#
# Box filter                                                              #
#-------------------------------------------------------------------------#
def box_filter(
        field,                  # field that is going to filtered
        kf = False):            # cutoff wavenumber

    """ Box filter """

    #---------------------------------------------------------------------#
    # Setting the default settings                                        #
    #---------------------------------------------------------------------#
    if kf is False:
        kf  = 40
    #---------------------------------------------------------------------#
    # Setup the wavenumber space                                          #
    #---------------------------------------------------------------------#
    dim     = field.shape[0]
    k       = np.fft.fftfreq(dim)*dim
    Kfield  = np.array(np.meshgrid(k,k,k,indexing='ij'))
    kmag    = np.sqrt(np.sum(np.square(Kfield.astype(np.float64)), axis=0))
    #---------------------------------------------------------------------#
    # Box filter                                                          #
    #---------------------------------------------------------------------#
    delta       = np.pi/kf
    G           = np.divide(np.sin(0.5*delta*kmag),(0.5*kmag*delta))
    G[0,0,0]    = 1.0
    #---------------------------------------------------------------------#
    # Applying box filter                                                 #
    #---------------------------------------------------------------------#
    f_tilde     = np.fft.ifftn(G*np.fft.fftn(field)).real

    return f_tilde
#-------------------------------------------------------------------------#
# Spectrally sharp filter                                                 #
#-------------------------------------------------------------------------#
def sharp_filter(
        field,                  # field that is going to filtered
        kf = False):            # cutoff wavenumber

    """ Spectrally sharp filter """

    #---------------------------------------------------------------------#
    # Setting the default settings                                        #
    #---------------------------------------------------------------------#
    if kf is False:
        kf  = 40
    #---------------------------------------------------------------------#
    # Setup the wavenumber space                                          #
    #---------------------------------------------------------------------#
    dim     = field.shape[0]
    k       = np.fft.fftfreq(dim)*dim
    Kfield  = np.array(np.meshgrid(k,k,k,indexing='ij'))
    kmag    = np.sqrt(np.sum(np.square(Kfield.astype(np.float64)), axis=0))
    #---------------------------------------------------------------------#
    # Sharp filter                                                        #
    #---------------------------------------------------------------------#
    k_kf    = kmag/kf
    G       = (np.abs(k_kf) <= 1.0).astype(np.complex64)
    #---------------------------------------------------------------------#
    # Applying box filter                                                 #
    #---------------------------------------------------------------------#
    f_tilde     = np.fft.ifftn(G*np.fft.fftn(field)).real

    return f_tilde
#=========================================================================#
# Main                                                                    #
#=========================================================================#
if __name__ == '__main__':
    #---------------------------------------------------------------------#
    # Main preamble                                                       #
    #---------------------------------------------------------------------#
    call(['clear'])

    print('**** This has not been unit tested ****')
    sys.exit(0)
