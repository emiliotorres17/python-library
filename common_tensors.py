#!/usr/bin/env python3
"""========================================================================
Purpose:
    The purpose of this subroutine is code common tensor operations (e.g.,
    Kronecker Delta, Levi-Civita Tensors).

Author:
    Emilio Torres
========================================================================"""
#=========================================================================#
# Preamble                                                                #
#=========================================================================#
#-------------------------------------------------------------------------#
# Python packages                                                         #
#-------------------------------------------------------------------------#
import sys
from subprocess import call
#=========================================================================#
# Subroutines                                                             #
#=========================================================================#
#-------------------------------------------------------------------------#
# Levi-Civita tensor                                                      #
#-------------------------------------------------------------------------#
def levi_civita(
        i,                  # i-th component
        j,                  # j-th component
        k):                 # k-th component

    """ Calculating the Levi-Civita tensor """
    #---------------------------------------------------------------------#
    # +1 condition                                                        #
    #---------------------------------------------------------------------#
    if i == 1 and j == 2 and k == 3:
        eps = 1.0
    elif i == 2 and j == 3 and k == 1:
        eps = 1.0
    elif i == 3 and j == 1 and k == 2:
        eps = 1.0
    #---------------------------------------------------------------------#
    # -1 condition                                                        #
    #---------------------------------------------------------------------#
    if i == 3 and j == 2 and k == 1:
        eps = -1.0
    elif i == 1 and j == 3 and k == 2:
        eps = -1.0
    elif i == 2 and j == 1 and k == 3:
        eps = -1.0
    #---------------------------------------------------------------------#
    # 0 condition                                                         #
    #---------------------------------------------------------------------#
    if i == j or j == k or k == i:
        eps = 0.0

    return eps
#-------------------------------------------------------------------------#
# Kronecker Delta                                                         #
#-------------------------------------------------------------------------#
def kronecker_delta(
        i,                  # i-th component
        j):                 # j-th component

    """ Calculating the Kronecker Delta """
    #---------------------------------------------------------------------#
    # Kronecker Delta                                                     #
    #---------------------------------------------------------------------#
    if i == j:
        delta = 1.0
    else:
        delta = 0.0

    return delta
#=========================================================================#
# Main                                                                    #
#=========================================================================#
if __name__ == "__main__":
    #---------------------------------------------------------------------#
    # Main preamble                                                       #
    #---------------------------------------------------------------------#
    call(["clear"])
    #---------------------------------------------------------------------#
    # Levi-Civita test                                                    #
    #---------------------------------------------------------------------#
    Eps1    = levi_civita(1,2,3)
    Eps2    = levi_civita(1,3,2)
    Eps3    = levi_civita(1,1,3)
    print("Levi-Civita Test:")
    print("\tEps1 = %f"         %(Eps1))
    print("\tEps2 = %f"         %(Eps2))
    print("\tEps3 = %f"         %(Eps3))
    #---------------------------------------------------------------------#
    # Kronecker Delta test                                                #
    #---------------------------------------------------------------------#
    delta1  = kronecker_delta(1,1)
    delta2  = kronecker_delta(1,3)
    print("Kronecker Delta Test:")
    print("\tdelta1 = %f"           %(delta1))
    print("\tdelta2 = %f"           %(delta2))

    print("\n\n**** Successful Run ****")
    sys.exit(0)
